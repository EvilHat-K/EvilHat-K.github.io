<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on EvilHat -- A Simple Blog</title>
    <link>http://evilhat-k.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on EvilHat -- A Simple Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 11 Feb 2017 22:51:29 +0800</lastBuildDate>
    <atom:link href="http://evilhat-k.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python学习记录_2</title>
      <link>http://evilhat-k.github.io/post/py-study-2/</link>
      <pubDate>Sat, 11 Feb 2017 22:51:29 +0800</pubDate>
      
      <guid>http://evilhat-k.github.io/post/py-study-2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;最近在使用whatweb的时候经常输出到json格式的文件, 于是就写了一个简单的json解析的脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*-coding:utf8 -*-

import json, sys

if(len(sys.argv) == 1):
    print &#39;Usage: python json_parse.py jsonfile&#39;
    quit()

json_file = sys.argv[1]
f = open(json_file)
f = json.load(f) #这里注意下, 如果是从文件里读取json数据, 那么这里应该用load方法, 如果是字符就用loads 
for num in f:
    try:
        target =  num[&#39;target&#39;]  #防止某些数据没有值导致输出不完整
    except Exception, e:
        target = &#39;&#39;

    try:
    	ip = num[&#39;plugins&#39;][&#39;IP&#39;][&#39;string&#39;][0]
    except Exception, e:
    	ip = &#39;&#39;

    try:
    	httpserver = num[&#39;plugins&#39;][&#39;HTTPServer&#39;][&#39;string&#39;][0]
    except Exception, e:
    	httpserver = &#39;&#39;

    print target+&#39;,&#39;+ip+&#39;,&#39;+httpserver
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>无限制文件上传测试</title>
      <link>http://evilhat-k.github.io/post/Unrestricted-File-Upload/</link>
      <pubDate>Tue, 27 Dec 2016 23:29:20 +0800</pubDate>
      
      <guid>http://evilhat-k.github.io/post/Unrestricted-File-Upload/</guid>
      <description>

&lt;h3 id=&#34;什么是无线无限制文件上传&#34;&gt;什么是无线无限制文件上传?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;存在漏洞的上传功能允许攻击者绕过输入控制,上传payload并可以潜在地执行命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;没有正确控制或验证过滤用户上传的文件的web应用,将有可能造成无 限制文件上传漏洞. 本文档概述了在执行Web应用程序渗透测试时文件上传功能的测试过程。这篇文章包含绕过文件上传黑名单过滤的各种技术，并总结了一个有用的检查列表&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;识别文件上传功能&#34;&gt;识别文件上传功能&lt;/h3&gt;

&lt;p&gt;文件上传功能可以说是既容易识别也容易利用. 典型的地方是在个人资料的头像上传,文档上传功能和文件导入功能处. 在Burp中, 它也会被动的识别文件上传点&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;使用burp-intruder测试无限制文件上传&#34;&gt;使用Burp Intruder测试无限制文件上传&lt;/h3&gt;

&lt;p&gt;Web应用经常使用黑名单列表来验证和过滤输入的文件,可以说是正常但也是不足的. 如果一个文件的拓展名不在黑名单列表内,那攻击者就可以绕过这个过滤. 所以输入验证的首选机制是输入白名单, 它使用 &amp;ldquo;拒绝其他全部&amp;rdquo; 的方法, 只允许需要的输入.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;burp测试文件上传拓展&#34;&gt;Burp测试文件上传拓展&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;手动上传一个可能会导致上传失败的文件, 找到可用于标识Web应用程序拒绝文件扩展名的响应。&lt;/li&gt;
&lt;li&gt;发送这个上传请求到 Burp intruder&lt;/li&gt;
&lt;li&gt;清除默认的变量标记点&lt;/li&gt;
&lt;li&gt;选择文件拓展名为变量标记点&lt;/li&gt;
&lt;li&gt;选择包含各个拓展名的payload,如php,jpg,gif等等&lt;/li&gt;
&lt;li&gt;在选项配置中使用 grep-match 来匹配步骤1中用于表示失败响应的字符串&lt;/li&gt;
&lt;li&gt;点击Start attack. 在结果窗口中匹配结果未打勾的都可能是漏洞点,需要进一步检查并确认任何发现&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;关键点:
1. 使用Burp Intruder测试所有扩展名,并使用Grep功能对结果进行排序
2. 使用可能绕过黑名单列表的非常见文件扩展名，例如: .php3, .php5, .phtml
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;测试文件上传的content-type&#34;&gt;测试文件上传的Content-Type&lt;/h4&gt;

&lt;p&gt;识别目标可接受的文件上传 Content-Type&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建立一个基线 &amp;ndash; 使用一个已知可接受的 Content-Type并查看应用的响应内容, 同样的使用一个可能失败的Content-Type并查看响应的内容,这个主要用于步骤 6 中&lt;/li&gt;
&lt;li&gt;发送上传请求到 Burp intruder&lt;/li&gt;
&lt;li&gt;清除默认的变量标记点&lt;/li&gt;
&lt;li&gt;选择 &amp;ldquo;Content-Type:&amp;rdquo; 头为变量标记点&lt;/li&gt;
&lt;li&gt;选择一个包含Content-Type的payload列表&lt;/li&gt;
&lt;li&gt;在选择配置选项中使用 grep-match来匹配步骤1中用于表示失败响应的字符串&lt;/li&gt;
&lt;li&gt;点击Start attck. 在结果窗口中匹配结果未打勾的都可能是漏洞点,需要进一步检查并确认任何发现&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;关键点:
1. 使用Burp Intruder测试所有Content-Type,并使用Grep功能对结果进行排序
2. 尝试改变Content-Type为一个可接受,且web服务或应用会处理的拓展名 (这里没理解什么意思)
3. 尝试可能绕过黑名单列表的非常见Content-Type
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;文件名和拓展名的fuzzing&#34;&gt;文件名和拓展名的Fuzzing&lt;/h4&gt;

&lt;p&gt;在输入验证时还应该测试文件名和拓展名,如果文件名是一个XSS, SQLI, LDAP或者命令注入payload时会发生什么?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;手动上传一个可能会被上传应用验证过滤的失败文件,找到一个可以用于识别Web应用程序拒绝的文件拓展名的响应标识&lt;/li&gt;
&lt;li&gt;发送上传请求到Burp Intruder&lt;/li&gt;
&lt;li&gt;清楚默认的变量标记点&lt;/li&gt;
&lt;li&gt;选择文件名或者拓展名为变量标记点&lt;/li&gt;
&lt;li&gt;选择一个包含各种注入的payload [如:js,XSS,CMD,LDAP,Xpath,SQL等等]&lt;/li&gt;
&lt;li&gt;在选择配置选项中使用 grep-match来匹配步骤1中用于表示失败响应的字符串&lt;/li&gt;
&lt;li&gt;点击Start attack, 在结果窗口中匹配结果未打勾的都可能是漏洞点&lt;/li&gt;
&lt;li&gt;验证确认发现的可能漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;文件上传黑名单绕过技术&#34;&gt;文件上传黑名单绕过技术&lt;/h3&gt;

&lt;h4 id=&#34;windows-iis-server黑名单文件上传绕过&#34;&gt;Windows IIS Server黑名单文件上传绕过:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;上传以黑名单列表中的拓展名后加分号的文件名,例如: &lt;strong&gt;shell.asp;.jpg&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创建一个.asp拓展的目录,然后在该目录下上传一个允许上传的文件名,例如: &lt;strong&gt;folder.asp\file.txt&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Python学习记录_1</title>
      <link>http://evilhat-k.github.io/post/py-study/</link>
      <pubDate>Fri, 23 Dec 2016 00:08:56 +0800</pubDate>
      
      <guid>http://evilhat-k.github.io/post/py-study/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最近开始&amp;rdquo;真正&amp;rdquo;接触Python了,也是计划中的一步,毕竟Python在网络安全中的应用能力还是很强大的. 估摸着以后会经常接触到一些需要自动化的情况,或为了实现我想做的.怎么说都要学好,哈哈&amp;hellip;&amp;hellip;OK!废话不多说,Python的优点不再多说,反正网上搜一大堆:(&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我的计划大概是这样的.把每次学习的最后代码(带注释)贴出来.不论代码如何,是好是坏. 也算是记录了我的学习历程吧!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;下面贴上代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*- #声明编码方式,不然中文会报错

import socket
import sys

#输出几行test,没列颜色不同
def printest():
    for i in range(2):
        for j in (2):
            print &amp;quot;\033[0;32m| Test1\033[0m&amp;quot;+&amp;quot; | &amp;quot;+&amp;quot;\033[0;33mTest2\033[0m&amp;quot;+&amp;quot; | &amp;quot;+&amp;quot;\033[0;34mTest3\033[0m&amp;quot;+&amp;quot;\n&amp;quot;


#以下根据输入的行数输出金字塔
def star():
    try:
        line = raw_input(&amp;quot;请输入金字塔的高度(太高就炸了):&amp;quot;)
        line = int(line)+1
    except Exception, e: #要捕获异常,不然异常会直接输出
        print &amp;quot;请输入整数!&amp;quot;
        exit()
    i = 0
    for i in range(line):
        blank = line - i
        star = (i-1)*2+1
        print &amp;quot; &amp;quot;*blank + &amp;quot;*&amp;quot;*star# + &amp;quot;\n&amp;quot;


#banner和文件里的信息对比
def bannercmp(banner):
    bfile = open(&amp;quot;test.txt&amp;quot;,&amp;quot;r&amp;quot;)
    for line in bfile:
        if line.strip(&amp;quot;\n&amp;quot;) in banner:
            print &#39;Found vulnerable:&#39;+banner.strip(&amp;quot;\n&amp;quot;)
        else:
            print &amp;quot;Not Found Vulnerable&amp;quot;


#网络socket,简单获取banner
def socketest(host,port):
    socket.setdefaulttimeout(5)  #设置默认超时时间
    s = socket.socket()
    try:
        s.connect((host,port))
    except Exception, e:
        print &amp;quot;[-]Error = &amp;quot;+str(e) #设置异常处理
        exit()
    banner = s.recv(1024)
    print &amp;quot;Extract Port Banner -&amp;gt;&amp;gt; &amp;quot;+banner


#定义帮助信息函数
def usageinfo():
    print &amp;quot;&amp;quot;&amp;quot;
    Usage:
    script.py star                    输出金字塔
              socket [host] [port]    获取banner信息

&amp;quot;&amp;quot;&amp;quot;

def main():
    #str = type(sys.argv)  #sys.argv获取数据类型为list.记录sys.argv[0]一直都是脚本名本身
    if len(sys.argv) &amp;lt; 2:
        usageinfo()
        exit()
    if sys.argv[1].strip() == &#39;star&#39;:
        star()
        exit()
    elif sys.argv[1].strip() == &#39;socket&#39;:
        try:
           host = sys.argv[2]
           port = int(sys.argv[3]) #传入的是字符类型,需要转为整数型,不然connect时会报错
        except Exception,e:
           print &amp;quot;Please Provide Host and port&amp;quot;
           exit()
        socketest(host,port)
        exit()

    usageinfo()


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cgiemail漏洞记录</title>
      <link>http://evilhat-k.github.io/post/cgiemail-exploit/</link>
      <pubDate>Sat, 17 Dec 2016 19:07:18 +0800</pubDate>
      
      <guid>http://evilhat-k.github.io/post/cgiemail-exploit/</guid>
      <description>&lt;p&gt;最近在测试的过程中,记录了一个应用的漏洞,这个应用通常用在了cpanel(虚拟主机管理面板).这次碰到了就记录一下吧,免得以后又忘记了.&lt;/p&gt;

&lt;p&gt;cgiemail的作用简单说就是通过webcgi的方式来发送email,具体的这里不多赘述.想了解的到 &lt;a href=&#34;http://web.mit.edu/wwwdev/cgiemail/&#34;&gt;项目地址&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;现在我找到的关于这个程序的2个漏洞&lt;br /&gt;
  1. &lt;a href=&#34;https://www.exploit-db.com/exploits/21998/&#34;&gt;CGIEmail 1.6 - 远程缓冲区溢出&lt;/a&gt;&lt;br /&gt;
  2. &lt;a href=&#34;https://www.exploit-db.com/exploits/40571&#34;&gt;CGIEmail 1.6 - 源代码泄露&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;先说下这个缓冲区溢出吧.具体的细节我也不太清楚,因为现在对缓冲区溢出这方面还不太了解,也不敢来分析什么的.以后接触到了可以拿来分析看看吧.&lt;br /&gt;
&amp;gt; 这个缓冲区漏洞问题出现在 &lt;strong&gt;cgicso&lt;/strong&gt; 中,这个是cgiemail编译后生成的4个文件之一.应该这个漏洞的披露时间是2001年左右,比较老了.现在很少会出现这个漏洞了.但是可以在测试的时候也尝试下.&lt;br /&gt;
&amp;gt; 通常这个程序用于流行的虚拟主机管理面板 cpanel中,在测试的时候,随便找一个使用这个虚拟主机机器的站点,在url后面加上 /cgi-sys/cgicso 或者 /cgi-bin/cgicso 一般都是这2个访问点.只要返回的信息不是没有这个程序,就说明 &lt;strong&gt;存在该文件&lt;/strong&gt; 因为这个漏洞现在几乎找不到了,我也没有找到例子,只能通过网上的资料来写.&lt;br /&gt;
&amp;gt; 在确人了该程序存在后,如果要利用这个漏洞还有一个前提条件.就是目标服务是否允许请求到远程主机. 可以发送一个GET请求来测试.&lt;a href=&#34;https://tools.cisco.com/security/center/viewAlert.x?alertId=5012&#34;&gt;参考&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;GET /cgi-sys/cgisco?fingerhost=A&amp;amp;query=AAA&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;接下来讲下源代码泄露这个漏洞.漏洞出现在cgiecho中,url访问点依旧和上面说的一样,不是/cgi-bin/ 就是 /cgi-sys/. 本来这个程序的作用是用于把email模板和传入的参数值输出到页面上,便于查看 &lt;a href=&#34;http://web.mit.edu/wwwdev/cgiemail/user.html#cgiecho&#34;&gt;官网介绍&lt;/a&gt;&lt;br /&gt;
&amp;gt; 但是它没有对传入email模板文件进行限制,导致我们可以传入当前站点根目录的任意一个文件作为email模板文件, 但是仅仅传入文件名,并不会泄露文件的内容.我们可以看看官网给的一个email模板文件的&lt;a href=&#34;http://web.mit.edu/wwwdev/cgiemail/questions3.txt&#34;&gt;例子&lt;/a&gt;&lt;br /&gt;
&lt;img src=&#34;http://evilhat-k.github.io/images/20161217/cgiemail-1.png&#34; alt=&#34;email模板例子&#34; /&gt;&lt;br /&gt;
&amp;gt; 通过说明和例子可以知道,如果要正常输出email文件的内容,除了文件要存在,还要传入一个 &lt;strong&gt;参数&lt;/strong&gt; 这个参数就是例子中用方括号包起来的字符 [email],[yourname],[quest],[colour].如果我们提交了如下请求,那么文件的内容就会输出,而方括号里的内容就会被传入的对应值填充 &lt;br &gt;
&lt;strong&gt;GET /cgi-sys/cgiecho/test.txt?email=demo&lt;/strong&gt;&lt;br /&gt;
&amp;gt; 这时候页面就输出文件的内容了.&lt;br /&gt;
&amp;gt; 注意:传入的参数必须和文件里方括号里的内容一致,如果文件里是 [&amp;lsquo;email&amp;rsquo;]这种,在请求里也要对应为?&amp;lsquo;email&amp;rsquo;=test.传入的值随意,只要不为空就可以. 这里test.txt对应的位置就是站点的根目录位置,如果文件在比如 demo/这个目录,同样加上目录/cgiecho/demo/test.txt就可以了.&lt;br /&gt;
&amp;gt; 知道了问题的原因和利用的条件,就可以去利用了. 这个漏洞有一点就是很坑,要成功利用,需要文件里有中括号包含的内容,就是有中括号,但是中括号里的内容就要靠猜了.不过通常的知道传入的参数还是挺好猜的,或者全站爬行一遍,就能找到很多参数了.注意:利用成功后会输出文件的内容,但其他包含中括号的内容如果没有猜解到,则会返回空.比如文件内有$str[&amp;lsquo;te&amp;rsquo;]和$str[&amp;rsquo;s&amp;rsquo;],如果传入test.php?&amp;lsquo;te&amp;rsquo;=[&amp;lsquo;te123&amp;rsquo;],那么就会返回$str[&amp;lsquo;te123&amp;rsquo;]和$str. 后面那个中括号里的内容就消失了,因为没有赋值.&lt;br /&gt;
&amp;gt; 这里附上个老外写的利用脚本 &lt;a href=&#34;https://github.com/finbar-crago/cgiemail-exploit&#34;&gt;https://github.com/finbar-crago/cgiemail-exploit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>随便说说</title>
      <link>http://evilhat-k.github.io/post/SaySome/</link>
      <pubDate>Thu, 15 Dec 2016 22:54:29 +0800</pubDate>
      
      <guid>http://evilhat-k.github.io/post/SaySome/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一次用hugo写文章,其实心里也是挺忐忑的,不知道这次能不能坚持写下去,以前好几个博客都夭折了!!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一如既往的在博客开始&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;希望可以坚持下去&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;先定一个小目标&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;博客写了10篇文章&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>